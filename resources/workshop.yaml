apiVersion: training.eduk8s.io/v1alpha1
kind: Workshop
metadata:
  name: lab-podman-testing
spec:
  vendor: eduk8s.io
  title: Podman Testing
  description: Play area for testing podman
  url: https://github.com/eduk8s-tests/lab-podman-testing
  image: quay.io/eduk8s-tests/lab-podman-testing:master
  duration: 1h
  session:
    budget: medium
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
    env:
    - name: REGISTRY_HOST
      value: $(session_namespace)-registry.$(ingress_domain)
    - name: REGISTRY_PASSWORD
      value: eduk8s
    patches:
      containers:
      - name: workshop
        resources:
          requests:
            memory: 256Mi
          limits:
            memory: 768Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: podman
          mountPath: /run/containers
          subPath: run-containers
        - name: podman
          mountPath: /var/lib/containers
          subPath: var-lib-containers
        - name: registry
          mountPath: /var/run/registry
      securityContext:
        fsGroup: 0
      volumes:
      - name: podman
        persistentVolumeClaim:
          claimName: $(session_namespace)-podman
      - name: registry
        configMap:
          name: $(session_namespace)-registry
          items:
          - key: config.json
            path: config.json
    objects:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-podman
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      data:
        htpasswd: |-
          eduk8s:$2y$05$Oe5Khp7HbllL1oANqmCPSOy1O656z9Z6ETv6GI/DblawxnT/qVUjK
        config.json: |-
          {
            "auths": {
               "$(session_namespace)-registry.$(ingress_domain)": {
                 "auth": "ZWR1azhzOmVkdWs4cw=="
               }
            }
          }
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      spec:
        replicas: 1
        selector:
          matchLabels:
            deployment: $(session_namespace)-registry
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              deployment: $(session_namespace)-registry
          spec:
            containers:
            - name: registry
              image: registry.hub.docker.com/library/registry:2.6.1
              imagePullPolicy: IfNotPresent
              ports:
              - containerPort: 5000
                protocol: TCP
              env:
              - name: REGISTRY_STORAGE_DELETE_ENABLED
                value: "true"
              - name: REGISTRY_AUTH
                value: htpasswd
              - name: REGISTRY_AUTH_HTPASSWD_REALM
                value: Image Registry
              - name: REGISTRY_AUTH_HTPASSWD_PATH
                value: /auth/htpasswd
              volumeMounts:
              - name: data
                mountPath: /var/lib/registry
              - name: auth
                mountPath: /auth
            securityContext:
              runAsUser: 1000
              fsGroup: 0
            volumes:
            - name: data
              persistentVolumeClaim:
                claimName: $(session_namespace)-registry
            - name: auth
              configMap:
                name: $(session_namespace)-registry
                items:
                - key: htpasswd
                  path: htpasswd
    - apiVersion: v1
      kind: Service
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      spec:
        type: ClusterIP
        ports:
        - port: 5000
          targetPort: 5000
        selector:
          deployment: $(session_namespace)-registry
    - apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 512m
      spec:
        rules:
        - host: $(session_namespace)-registry.$(ingress_domain)
          http:
            paths:
            - path: "/"
              backend:
                serviceName: $(session_namespace)-registry
                servicePort: 5000
        tls:
        - hosts:
          - "*.$(ingress_domain)"
          secretName: "$(ingress_secret)"
    - apiVersion: policy/v1beta1
      kind: PodSecurityPolicy
      metadata:
        name: $(session_namespace)-podman
      spec:
        allowPrivilegeEscalation: true
        requiredDropCapabilities:
        - KILL
        - MKNOD
        hostIPC: false
        hostNetwork: false
        hostPID: false
        hostPorts: []
        runAsUser:
          rule: MustRunAsNonRoot
        seLinux:
          rule: MustRunAs
        fsGroup:
          rule: MustRunAs
        supplementalGroups:
          rule: RunAsAny
        volumes:
        - configMap
        - downwardAPI
        - emptyDir
        - persistentVolumeClaim
        - projected
        - secret
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: $(session_namespace)-podman
      rules:
      - apiGroups: ['policy']
        resources: ['podsecuritypolicies']
        verbs:     ['use']
        resourceNames:
        - $(session_namespace)-podman
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: $(session_namespace)-podman
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: $(session_namespace)-podman
      subjects:
      - kind: ServiceAccount
        namespace: $(workshop_namespace)
        name: $(service_account)
